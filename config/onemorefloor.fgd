
@BaseClass = BaseProperties_onemorefloor
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// OneMoreFloor.Weapons.ArmWeapon
//
@PointClass base(BaseProperties_onemorefloor) = weapon_arm : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// OneMoreFloor.Entities.AcquirableClothesEntity
//
@PointClass base(BaseProperties_onemorefloor) tags( Physics ) model() = ent_omf_acquirable : "An acquirable clothes model that can be worn by the player when used."
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	bodygroup_type(choices) : "Target Body Group" : 3 : "The body group this entity is to be attached to when picked up." =
	[
		0 : "Legs"
		1 : "Chest"
		2 : "Feet"
		3 : "Head"
	]
	bodymodel(studio) : "Body Model" :  : "The model to be used when attached to the player body."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// OneMoreFloor.Entities.FloorMarkerEntity
//
@PointClass base(BaseProperties_onemorefloor) iconsprite( "editor/omf_floormarker.vmat" ) = ent_omf_floormarker : "Marks an elevator floor for One More Floor."
[
	islobby(boolean) : "Is Lobby floor" : 0 : "Whether or not this floor is the lobby."
	istop(boolean) : "Is Top floor" : 0 : "Whether or not this floor is the lobby."
	floor_bgm(sound) : "Floor BGM" : "" : "BGM for this floor. Will be faded in and out for each player in the floor."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input StopElevatorBgm(void) : "Stop the elevator BGM."
	input StartElevatorBgm(void) : "Start the elevator BGM."
	input Teleport(void) : "Activates teleport to an in this session unseen floor."

	output OnArrival(void) : "Fires when a teleport to this floor is activated."
]

//
// OneMoreFloor.Entities.Arcade.MinigameEntity
//
@PointClass base(BaseProperties_onemorefloor) = ent_omf_minigame : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// OneMoreFloor.Entities.Arcade.Cabs.BaseCabEntity
//
@PointClass base(BaseProperties_onemorefloor) model() = ent_omf_arcade_basecab : "Base arcade cabinet for One More Floor."
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	screen_height(integer) : "Screen Height" : 55 : "The height of the screen relative from the floor (used for camera direction)."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

